name: build Gmeek

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  issues:
    types: [opened, edited, closed]
  schedule:
    - cron: "0 16 * * *"

jobs:
  build_and_deploy:
    name: Generate and Deploy Blog
    runs-on: ubuntu-latest
    if: ${{ github.event.repository.owner.id == github.event.sender.id || github.event_name == 'schedule' || github.event_name == 'push' }}
    
    permissions:
      contents: write
      issues: write
      pages: write
      id-token: write

    concurrency:
      group: "pages"
      cancel-in-progress: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Set up Python 3.8
        uses: actions/setup-python@v5
        with:
          python-version: 3.8

      - name: Cache Gmeek Source and Dependencies
        uses: actions/cache@v4
        id: gmeek-cache
        with:
          path: |
            /opt/Gmeek
            ~/.cache/pip
          # 修正后的 Key: 仅基于 config.json。当您修改 Gmeek 版本时，此 key 会变化，使缓存失效。
          key: ${{ runner.os }}-gmeek-v1-${{ hashFiles('config.json') }}
          restore-keys: |
            ${{ runner.os }}-gmeek-v1-

      - name: Clone Gmeek repository
        # 关键：此步骤仅在缓存未命中时运行
        if: steps.gmeek-cache.outputs.cache-hit != 'true'
        run: |
          echo "Cache miss. Cloning Gmeek repository..."
          GMEEK_VERSION=$(jq -r ".GMEEK_VERSION" config.json)
          git clone https://github.com/Meekdai/Gmeek.git /opt/Gmeek
          cd /opt/Gmeek/
          lastTag=$(git describe --tags `git rev-list --tags --max-count=1`)
          if [ "$GMEEK_VERSION" == "last" ]; then git checkout $lastTag; else git checkout $GMEEK_VERSION; fi
        
      - name: Install Dependencies
        # 此步骤总是运行，但如果缓存命中，它会因为 pip 的缓存而变得非常快
        run: |
          python -m pip install --upgrade pip
          pip install -r /opt/Gmeek/requirements.txt
        
      - name: Generate new html
        run: |
          # 确定 issue_number
          ISSUE_NUMBER=""
          if [[ "${{ github.event_name }}" == "issues" ]]; then
            ISSUE_NUMBER="${{ github.event.issue.number }}"
          fi

          echo "Running Gmeek.py with issue number: $ISSUE_NUMBER"
          
          # 您的 Gmeek.py 似乎需要将工作目录文件复制到 /opt/Gmeek
          cp -r ./* /opt/Gmeek/
          cd /opt/Gmeek/
          python Gmeek.py ${{ secrets.GITHUB_TOKEN }} ${{ github.repository }} --issue_number "$ISSUE_NUMBER"
          
          # 将生成的文件复制回工作区
          rsync -av --delete /opt/Gmeek/docs/ ${{ github.workspace }}/docs/
          rsync -av --delete /opt/Gmeek/backup/ ${{ github.workspace }}/backup/
          cp /opt/Gmeek/blogBase.json ${{ github.workspace }}/blogBase.json

      - name: Commit and Push Changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs backup blogBase.json README.md
          if ! git diff --staged --quiet; then
            git commit -m '🎉 auto update by Gmeek action'
            git push
          else
            echo "Nothing to commit. Working tree clean."
          fi
          
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'docs'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
